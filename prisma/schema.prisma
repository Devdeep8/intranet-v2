// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  permissions RolePermission[]
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  label       String
  permissions RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// ============= User Management ==============
model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  password     String
  isOnboarded  Boolean   @default(false)
  image        String?
  roleId       String?
  departmentId String?

  // === Auth Relations ===
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  // === Role & Department ===
  role              Role?       @relation(fields: [roleId], references: [id])
  department        Department? @relation("DepartmentUsers", fields: [departmentId], references: [id], onDelete: SetNull)
  headOfDepartment  Department? @relation("DepartmentHead")

  // === Attendance ===
  attendance    Attendance[]

  // === Onboarding Tasks ===
  onboardingTasks  UserOnboardingTask[]

  // === Project Management ===
  createdProjects       Project[]            @relation("ProjectCreatedBy")
  assignedTasks         Task[]              @relation("TaskAssignee")
  projectContributions  ProjectContributor[]

  // === Timestamps ===
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// ============= Department Management ==============
model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  priority    Int?     @default(99)

  headId      String?  @unique

  head        User?    @relation("DepartmentHead", fields: [headId], references: [id], onDelete: SetNull)
  users       User[]   @relation("DepartmentUsers")
  projects    Project[]

  status      DepartmentStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model OnboardingTask {
  id          String                  @id @default(cuid())
  title       String
  description String?
  isMandatory Boolean                @default(true)
  order       Int                    @default(0)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  assignedTo  UserOnboardingTask[]
}

model UserOnboardingTask {
  id               String            @id @default(cuid())
  userId           String
  onboardingTaskId String
  status           TaskStatus        @default(PENDING)
  notes            String?

  user             User              @relation(fields: [userId], references: [id])
  onboardingTask   OnboardingTask    @relation(fields: [onboardingTaskId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@unique([userId, onboardingTaskId])
}

enum TaskStatus {
  PENDING
  COMPLETED
}

// ============= Attandance System ==============
model Attendance {
  id          String      @id @default(cuid())
  userId      String
  date        DateTime    @db.Date
  checkIn     DateTime?
  checkOut    DateTime?
  totalHours  Decimal?    @db.Decimal(4, 2)
  status      Status      @default(PRESENT)
  notes       String?
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([userId, date])
}

enum Status {
  PRESENT
  ABSENT
  HALF_DAY
  LEAVE
}

// ============= Project Management System ==============
model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime?
  status         ProjectStatus     @default(NOT_STARTED)
  billable       Boolean           @default(true)

  departmentId   String
  createdById    String

  department     Department        @relation(fields: [departmentId], references: [id])
  createdBy      User              @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  tasks          Task[]
  contributors   ProjectContributor[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  status      ProjectTaskStatus @default(PENDING)
  billable    Boolean           @default(true)
  hoursLogged Decimal?          @db.Decimal(5, 2)

  projectId   String
  assigneeId  String

  project     Project @relation(fields: [projectId], references: [id])
  assignee    User    @relation("TaskAssignee", fields: [assigneeId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProjectContributor {
  id         String   @id @default(cuid())

  projectId  String
  userId     String

  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@unique([projectId, userId])
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProjectTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}
